# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: backend_variable_group_zain

jobs:
- job: Terraform_Validate
  displayName: 'Terraform Validate'

  steps:
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: 'latest'

  - task: TerraformCLI@0
    displayName: Intialize
    inputs:
      command: 'init'
      backendType: azurerm
      backendServiceArm: $(backendServiceArm)
      backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
      backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
      backendAzureRmContainerName:  $(backendAzureRmContainerName)
      backendAzureRmKey: $(backendAzureRmKey)
      backendAzureRmResourceGroupLocation: $(backendAzureRmResourceGroupLocation)
      ensureBackend: true

  - task: TerraformCLI@0
    displayName: Validation
    inputs:
      command: 'validate'
      allowTelemetryCollection: true



  - task: TerraformCLI@0
    displayName: Planning
    inputs:
      command: 'plan'
      runAzLogin: true
      allowTelemetryCollection: true
      environmentServiceName: $(backendServiceArm)
      publishPlanResults: 'plan-results'
      commandOptions: '-out plan-results.tfplan'

  - task: TerraformCLI@0
    displayName: Application
    inputs:
      command: 'apply'
      runAzLogin: true
      allowTelemetryCollection: true
      environmentServiceName: $(backendServiceArm)
      commandOptions: 'plan-results.tfplan'

  - task: TerraformCLI@0
    displayName: Destruction
    inputs:
      command: 'destroy'
      allowTelemetryCollection: true
      environmentServiceName: $(backendServiceArm)